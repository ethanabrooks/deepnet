
==================== FINAL INTERFACE ====================
2016-01-15 00:43:51.683702 UTC

interface main@main:UtilSpec 7103
  interface hash: 8c13f8ad3a54455ebbe4bee69605edcc
  ABI hash: eefbfd52b55bfdae321ed266956b1dd1
  export-list hash: 3105df51b1d95b5c1e5aa0e9ec0c794f
  orphan hash: e90f6246ef9e21ff10e43207cd851384
  flag hash: 4b91a8cecf8befd494c7f754f2f130ad
  sig of: Nothing
  used TH splices: False
  where
exports:
  UtilSpec.main
  UtilSpec.spec
module dependencies:
package dependencies: HUnit-1.3.0.0@HUnit_BG7FInvjg0k8rLNKmL1VFA
                      QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s
                      ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      async-2.0.2@async_1QvsFXyq0AKLt4KdNR0ChF base-4.8.2.0
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepnet-0.1.0.0@deepn_98vzwQjA0spLmxroj6F8bT
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hspec-expectations-0.7.2@hspec_19YQSHkZ0r2ED4k4Dnbroh
                      hspec-2.2.1@hspec_4R8oqeKmp2qHiEwtLGb3ih
                      hspec-core-2.2.1@hspec_6FsJHgZEWSa1Ixa6PnC7Vi
                      ieee754-0.7.6@ieee7_E4oWks01x7uFbXdcWiQ2b6 integer-gmp-1.0.0.0
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      quickcheck-io-0.1.2@quick_84PO7q7D3omKi8iPu2FhUx
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz
                      repa-algorithms-3.4.0.2@repaa_3hv7HcVBeZR6U4p9fNx1ic
                      setenv-0.1.1.3@seten_6IUqFDI6NejGrNz9ulqEjc
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD template-haskell-2.10.0.0
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         deepnet-0.1.0.0@deepn_98vzwQjA0spLmxroj6F8bT:Util
         quickcheck-io-0.1.2@quick_84PO7q7D3omKi8iPu2FhUx:Test.QuickCheck.IO
         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Arbitrary
         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Operators.Reduction
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         hspec-core-2.2.1@hspec_6FsJHgZEWSa1Ixa6PnC7Vi:Test.Hspec.Core.Example
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Operators.Mapping
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.ByteString
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.Cursored
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.Delayed
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.ForeignPtr
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.HintInterleave
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.HintSmall
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.Partitioned
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.Unboxed
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.Undefined
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Repr.Vector
                         repa-3.4.0.2@repa_HcTnFDBCpx6422ziQ2Sejz:Data.Array.Repa.Slice
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck 437de8bc77c4cf58d9f8e24d5f1189e0
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  deepnet-0.1.0.0@deepn_98vzwQjA0spLmxroj6F8bT:Model 222f0c25a74a114b9f7879d8699ed007
import  -/  deepnet-0.1.0.0@deepn_98vzwQjA0spLmxroj6F8bT:Util f3515a7cd17b7af1db2671413e3a55e8
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  hspec-expectations-0.7.2@hspec_19YQSHkZ0r2ED4k4Dnbroh:Test.Hspec.Expectations e12b441a7b72d3aa83fa9750ec6e0e23
import  -/  hspec-2.2.1@hspec_4R8oqeKmp2qHiEwtLGb3ih:Test.Hspec 43710f8862aee78438860de68c4c6703
import  -/  hspec-core-2.2.1@hspec_6FsJHgZEWSa1Ixa6PnC7Vi:Test.Hspec.Core.Runner 75f6c9611a20b82f9441f8d9cac2058d
import  -/  hspec-core-2.2.1@hspec_6FsJHgZEWSa1Ixa6PnC7Vi:Test.Hspec.Core.Spec c54b2f4d41918202cba2c721fb29c24f
import  -/  hspec-core-2.2.1@hspec_6FsJHgZEWSa1Ixa6PnC7Vi:Test.Hspec.Core.Spec.Monad 44097e8e37ec551f9c09bbe5676bbb2f
import  -/  ieee754-0.7.6@ieee7_E4oWks01x7uFbXdcWiQ2b6:Data.AEq 811502a661b153a76fce5528ae84ee32
4b40ceecab5a5461875c0ab89609dd3b
  $s$fShow:. ::
    GHC.Show.Show
      (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                  (Data.Array.Repa.Index.$fShow:._$cshowsPrec
                     @ Data.Array.Repa.Index.Z
                     @ GHC.Types.Int
                     Data.Array.Repa.Index.$fShowZ
                     GHC.Show.$fShowInt)
                  (Data.Array.Repa.Index.$fShow:._$cshow
                     @ Data.Array.Repa.Index.Z
                     @ GHC.Types.Int
                     Data.Array.Repa.Index.$fShowZ
                     GHC.Show.$fShowInt)
                  UtilSpec.$s$fShow:.1 -}
f5c0002464995e7c9be83a73622fdf0d
  $s$fShow:.1 ::
    [Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Data.Array.Repa.Index.Z
                           Data.Array.Repa.Index.:. GHC.Types.Int]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                   UtilSpec.$s$fShow:.2
                   eta
                   eta1) -}
9e2caa0a4276edd8fdcda6483672509f
  $s$fShow:.2 ::
    (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Data.Array.Repa.Index.Z
                         Data.Array.Repa.Index.:. GHC.Types.Int ->
                 case w3 of ww2 { Data.Array.Repa.Index.:. ww3 ww4 ->
                 Data.Array.Repa.Index.$w$cshowsPrec
                   @ Data.Array.Repa.Index.Z
                   @ GHC.Types.Int
                   Data.Array.Repa.Index.$fShowZ
                   GHC.Show.$fShowInt
                   0
                   ww3
                   ww4 }) -}
d142d8f10dca66cef8904c9e77338898
  $s$fShow:.3 ::
    GHC.Show.Show
      ((Data.Array.Repa.Index.DIM0
        Data.Array.Repa.Index.:. GHC.Types.Int)
       Data.Array.Repa.Index.:. GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ((Data.Array.Repa.Index.DIM0
                      Data.Array.Repa.Index.:. GHC.Types.Int)
                     Data.Array.Repa.Index.:. GHC.Types.Int)
                  (Data.Array.Repa.Index.$fShow:._$cshowsPrec
                     @ (Data.Array.Repa.Index.DIM0
                        Data.Array.Repa.Index.:. GHC.Types.Int)
                     @ GHC.Types.Int
                     UtilSpec.$s$fShow:.4
                     GHC.Show.$fShowInt)
                  (Data.Array.Repa.Index.$fShow:._$cshow
                     @ (Data.Array.Repa.Index.DIM0
                        Data.Array.Repa.Index.:. GHC.Types.Int)
                     @ GHC.Types.Int
                     UtilSpec.$s$fShow:.4
                     GHC.Show.$fShowInt)
                  UtilSpec.$s$fShow:._$s$fShow:._$cshowList -}
73fdaa9c3dd3e80d98fb8f040e7ff620
  $s$fShow:.4 ::
    GHC.Show.Show
      (Data.Array.Repa.Index.DIM0 Data.Array.Repa.Index.:. GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) UtilSpec.$s$fShow:. -}
2ef214ed980c39c577021f8d9da4e723
  $s$fShow:._$s$fShow:._$cshowList ::
    [(Data.Array.Repa.Index.DIM0
      Data.Array.Repa.Index.:. GHC.Types.Int)
     Data.Array.Repa.Index.:. GHC.Types.Int]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [(Data.Array.Repa.Index.DIM0
                            Data.Array.Repa.Index.:. GHC.Types.Int)
                           Data.Array.Repa.Index.:. GHC.Types.Int]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ ((Data.Array.Repa.Index.DIM0
                       Data.Array.Repa.Index.:. GHC.Types.Int)
                      Data.Array.Repa.Index.:. GHC.Types.Int)
                   (Data.Array.Repa.Index.$fShow:._$cshowsPrec
                      @ (Data.Array.Repa.Index.DIM0
                         Data.Array.Repa.Index.:. GHC.Types.Int)
                      @ GHC.Types.Int
                      UtilSpec.$s$fShow:.4
                      GHC.Show.$fShowInt
                      Data.Array.Repa.Index.$fShow:.1)
                   eta
                   eta1) -}
b3fcc5a421076ba5b055af41e841468e
  $s$fShowArray ::
    GHC.Show.Show
      (Data.Array.Repa.Base.Array
         Data.Array.Repa.Repr.Unboxed.U
         (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
         GHC.Types.Double)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Repa.Base.Array
                       Data.Array.Repa.Repr.Unboxed.U
                       (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
                       GHC.Types.Double)
                  (Data.Array.Repa.Repr.Unboxed.$fShowArray_$cshowsPrec
                     @ (Data.Array.Repa.Index.DIM1
                        Data.Array.Repa.Index.:. GHC.Types.Int)
                     @ GHC.Types.Double
                     UtilSpec.$s$fShowArray1
                     GHC.Float.$fShowDouble
                     Data.Vector.Unboxed.Base.$fUnboxDouble)
                  UtilSpec.$s$fShowArray_$s$fShowArray_$cshow
                  UtilSpec.$s$fShowArray_$s$fShowArray_$cshowList -}
c8fd02b6ebada278968eaa7d941900fe
  $s$fShowArray1 ::
    GHC.Show.Show
      (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) UtilSpec.$s$fShow:.3 -}
e40f0e1e9c90b6f6365d60250306ce91
  $s$fShowArray_$s$fShowArray_$cshow ::
    Data.Array.Repa.Base.Array
      Data.Array.Repa.Repr.Unboxed.U
      (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
      GHC.Types.Double
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SS),1*U(U(U(1*H,U(U)),U(U)),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Data.Array.Repa.Base.Array
                          Data.Array.Repa.Repr.Unboxed.U
                          (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
                          GHC.Types.Double ->
                 Data.Array.Repa.Repr.Unboxed.$fShowArray_$cshowsPrec
                   @ (Data.Array.Repa.Index.DIM1
                      Data.Array.Repa.Index.:. GHC.Types.Int)
                   @ GHC.Types.Double
                   UtilSpec.$s$fShowArray1
                   GHC.Float.$fShowDouble
                   Data.Vector.Unboxed.Base.$fUnboxDouble
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c1f71b456e1794c999feaea36c4ded6c
  $s$fShowArray_$s$fShowArray_$cshowList ::
    [Data.Array.Repa.Base.Array
       Data.Array.Repa.Repr.Unboxed.U
       (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
       GHC.Types.Double]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [Data.Array.Repa.Base.Array
                             Data.Array.Repa.Repr.Unboxed.U
                             (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
                             GHC.Types.Double]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Data.Array.Repa.Base.Array
                        Data.Array.Repa.Repr.Unboxed.U
                        (Data.Array.Repa.Index.DIM1 Data.Array.Repa.Index.:. GHC.Types.Int)
                        GHC.Types.Double)
                   (Data.Array.Repa.Repr.Unboxed.$fShowArray_$cshowsPrec
                      @ (Data.Array.Repa.Index.DIM1
                         Data.Array.Repa.Index.:. GHC.Types.Int)
                      @ GHC.Types.Double
                      UtilSpec.$s$fShowArray1
                      GHC.Float.$fShowDouble
                      Data.Vector.Unboxed.Base.$fUnboxDouble
                      Data.Array.Repa.Repr.Unboxed.$fShowArray1)
                   eta
                   eta1) -}
c0d9472b47be4f3e0bf8f9f0e0ee04c5
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                UtilSpec.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
181ce726cba78ab2183f023ea0b8c420
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Options.defaultConfig
                        UtilSpec.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.NTCo:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.NTCo:SpecM[0] <()>_N) <()>_N)))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.die2 @ () ipv
                   0 -> (# ipv, GHC.Tuple.() #) } } } }) -}
d67e2b020a41422d5978540a2b6859ad
  main10 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   UtilSpec.main11
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
42c4b1d9222da4f77b7282ff1fc2d91b
  main11 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((UtilSpec.main18, UtilSpec.main12)) -}
0ea1111e0c8f78e09bc3536772a8498d
  main12 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   UtilSpec.main17
                   UtilSpec.main16
                   UtilSpec.main15
                   UtilSpec.main14
                   UtilSpec.main13
                   UtilSpec.main14
                   UtilSpec.main14) -}
de988f8e6fa32dd26442e4ba5ee343eb
  main13 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 17) -}
c5abf1c378c09b8d766a72bc968d9ae2
  main14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 27) -}
709fbb2275d6e98233795bba299dbf13
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/UtilSpec.hs"#) -}
e99c259bbd40ecc10596a5d1146f08d3
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UtilSpec"#) -}
8b93a80bb24c2fdb9ecd6269236fccbf
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
dc6c8e4f9f3504b63e19a850bd0b6e4c
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shouldBe"#) -}
00fea7be3a240cf2245c566eb4879355
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "appends column of ones to left side of matrix"#) -}
cf99d1d8271767aaecbb40be83792d7b
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# s,
                    (GHC.Tuple.(),
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       UtilSpec.main33
                       UtilSpec.main3) #)) -}
13cc03fe95e333157baad8053ab6e274
  main20 ::
    GHC.Base.String
    -> Test.Hspec.Expectations.Expectation
    -> Test.Hspec.Core.Tree.SpecTree
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.specItem
                   @ Test.Hspec.Expectations.Expectation
                   UtilSpec.main21
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Sub (Test.Hspec.Core.Example.TFCo:R:Arg(->)0[0]
                                         (Sym (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.NTCo:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))) -}
09f00f3e8f0c6b3afbc264d875286cef
  main21 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack UtilSpec.main22) -}
e12e7b82369f0012a0b7f7a5cb9688bd
  main22 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.Hspec.Core.Spec.it2
                   UtilSpec.main23) -}
3b126e3a78e65c0af1906d57d0d53f8b
  main23 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   UtilSpec.main24
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
b02c2c469338f9eb118c6a25c4b9a65d
  main24 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((UtilSpec.main29, UtilSpec.main25)) -}
be16b461829a24642e39ed88944ac130
  main25 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   UtilSpec.main17
                   UtilSpec.main16
                   UtilSpec.main15
                   UtilSpec.main28
                   UtilSpec.main27
                   UtilSpec.main28
                   UtilSpec.main26) -}
7dc93c776ed0663681f90493bd43f167
  main26 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 7) -}
dc021d9e394cc49a1faec4a5d70ae9bf
  main27 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5) -}
9a9582f55239c9961ce2e9f24a2e6b93
  main28 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 26) -}
a230bc85c42afb4187c6c8cba5142da9
  main29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "it"#) -}
d575b6e2b40fb4c49d7afcd2aeaba1ae
  main3 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   UtilSpec.main4
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
d74f0f747ae0c77577757f20d75c203a
  main30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   UtilSpec.main32
                   UtilSpec.main31) -}
599b8fa722d19385d78d5755e75f68cf
  main31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ddOne"#) -}
95247f9bccc8a839958b74b603dc97de
  main32 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'a') -}
dbb50e0cb6fa7b0e9190518c49295607
  main33 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   UtilSpec.main34
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
91991780014ad4a0c199b3c96866b9d3
  main34 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   UtilSpec.main78
                   UtilSpec.main35) -}
57648446a8400525ecb734614dbd3ee3
  main35 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   UtilSpec.main60
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])))_R)_R])_R
                   UtilSpec.main36
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])))_R)_R])_R) -}
d4e687f2a5336eb79176270ce71040bc
  main36 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   UtilSpec.main37
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
7db539c50d948ac1362ac7cf7dcae98a
  main37 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (UtilSpec.main53
                   UtilSpec.main52
                   UtilSpec.main38 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
1229c4f2af0ceb964beb5b85b8d440aa
  main38 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 case Data.Array.Repa.Operators.Reduction.$fEqArray_$c==
                        @ Data.Array.Repa.Repr.Unboxed.U
                        @ (Data.Array.Repa.Index.DIM1
                           Data.Array.Repa.Index.:. GHC.Types.Int)
                        @ GHC.Types.Double
                        Util.$fAEqArray_$s$fShape:.
                        Util.$fAEqArray_$s$fEq:.
                        Util.$fAEqArray_$s$fSourceUa
                        GHC.Classes.$fEqDouble
                        Util.m1
                        Util.m of wild {
                   GHC.Types.False -> (# eta2, GHC.Tuple.() #)
                   GHC.Types.True
                   -> (UtilSpec.main41 UtilSpec.main39)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <()>_R)
                        eta2 }) -}
9932a22f57a8a7671fb1408425ed216f
  main39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "not expected: "#
                   UtilSpec.main40) -}
6618f79f8499f07e0adfbf624158caab
  main4 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   UtilSpec.main30
                   UtilSpec.main5
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])))_R)_R])_R) -}
a014de144464128fe2db4e80861ee30f
  main40 :: GHC.Base.String
  {- Unfolding: (case Util.m1
                        `cast`
                      (Sub (Data.Array.Repa.Repr.Unboxed.TFCo:R:ArrayUsha[0]
                                <GHC.Types.Double>_N
                                <Data.Array.Repa.Index.DIM1
                                 Data.Array.Repa.Index.:. GHC.Types.Int>_N)) of ww2 { Data.Array.Repa.Repr.Unboxed.AUnboxed ww3 ww4 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Data.Array.Repa.Repr.Unboxed.$fShowArray2
                   (case ww3 of ww1 { Data.Array.Repa.Index.:. ww5 ww6 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (case ww5 of ww7 { Data.Array.Repa.Index.:. ww8 ww9 ->
                       GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows9
                         (let {
                            eta :: GHC.Base.String
                            = GHC.Base.++
                                @ GHC.Types.Char
                                Data.Array.Repa.Index.$fShow:.2
                                (case ww9 of ww10 { GHC.Types.I# ww11 ->
                                 case GHC.Show.$wshowSignedInt
                                        4
                                        ww11
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows8
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Data.Array.Repa.Index.$fShow:.2
                                              (case ww6 of ww12 { GHC.Types.I# ww13 ->
                                               case GHC.Show.$wshowSignedInt
                                                      4
                                                      ww13
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.shows8
                                                         (GHC.Types.:
                                                            @ GHC.Types.Char
                                                            GHC.Show.showSpace1
                                                            (Data.Vector.Unboxed.$w$cshowsPrec
                                                               @ GHC.Types.Double
                                                               GHC.Float.$fShowDouble
                                                               Data.Vector.Unboxed.Base.$fUnboxDouble
                                                               ww4
                                                               (GHC.Types.[]
                                                                  @ GHC.Types.Char)))) of ww14 { (#,#) ww15 ww16 ->
                                               GHC.Types.:
                                                 @ GHC.Types.Char
                                                 ww15
                                                 ww16 } }))) of ww12 { (#,#) ww13 ww14 ->
                                 GHC.Types.: @ GHC.Types.Char ww13 ww14 } })
                          } in
                          letrec {
                            go :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                            = \ ds :: [GHC.Types.Char] ->
                              case ds of wild {
                                [] -> eta : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                          } in
                          go Data.Array.Repa.Index.$fReadZ4) }) }) }) -}
670f3861ac5c1b59f3472abf9a63ee62
  main41 :: GHC.Base.String -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertFailure
                   UtilSpec.main42
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))) -}
9402ebb07dbe800a2eed553b8a36470e
  main42 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack UtilSpec.main43) -}
74f48d511a0e8b044f5ac3c3eaf0e2a4
  main43 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.Hspec.Expectations.expectationFailure1
                   UtilSpec.main44) -}
11cac8714ebc94a1484dd4824a3e2487
  main44 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.Hspec.Expectations.shouldBe8
                   UtilSpec.main45) -}
4e211dda7e74b42ae18e104a3fc6d92e
  main45 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.Hspec.Expectations.shouldNotBe2
                   UtilSpec.main46) -}
fd55f6e5061dca3c11be5e81a7243956
  main46 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   UtilSpec.main47
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
26019f5cd68a3ad1fdf8674c4c492e84
  main47 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((UtilSpec.main51, UtilSpec.main48)) -}
8da271db7873610f71f0a4fe74407a29
  main48 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   UtilSpec.main17
                   UtilSpec.main16
                   UtilSpec.main15
                   UtilSpec.main50
                   UtilSpec.main49
                   UtilSpec.main50
                   UtilSpec.main50) -}
af58ddc2c175eafc118e02fa584b6df6
  main49 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
d2c94a97cdff343b58507b94edceb24f
  main5 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   UtilSpec.main6
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
5b2db9bc48369460490c517f49714564
  main50 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 23) -}
35d10ac3cee0cf23547fd155f55c60b5
  main51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shouldNotBe"#) -}
018371a7d6646d2dc589924da1684dae
  main52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "implements inequality"#) -}
00700bf0f5657c62d83515b57b252b45
  main53 ::
    GHC.Base.String
    -> Test.Hspec.Expectations.Expectation
    -> Test.Hspec.Core.Tree.SpecTree
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.specItem
                   @ Test.Hspec.Expectations.Expectation
                   UtilSpec.main54
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Sub (Test.Hspec.Core.Example.TFCo:R:Arg(->)0[0]
                                         (Sym (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.NTCo:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))) -}
f98dc1f8f1df1e250db4a7607e2e5b1a
  main54 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack UtilSpec.main55) -}
2331aa343b925f2dd5092eb195551ab9
  main55 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.Hspec.Core.Spec.it2
                   UtilSpec.main56) -}
6babf52f31656b152c9b067823ac3fcc
  main56 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   UtilSpec.main57
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
4cd86193a9cd44011835c29790b40378
  main57 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((UtilSpec.main29, UtilSpec.main58)) -}
de8a63cfb7a2dca1fb4f7a5fa83f8e7e
  main58 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   UtilSpec.main17
                   UtilSpec.main16
                   UtilSpec.main15
                   UtilSpec.main59
                   UtilSpec.main27
                   UtilSpec.main59
                   UtilSpec.main26) -}
89119f588eda0a494ea4e9870a9eb74c
  main59 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 22) -}
02a07fd75028bde4dc6dda7ea7329866
  main6 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (UtilSpec.main20
                   UtilSpec.main19
                   UtilSpec.main7 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
298ac7d2d07c99578b4eff310d9868c3
  main60 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   UtilSpec.main61
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
febf9b3c2b7ffdc51fdca61c7be5ebb0
  main61 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (UtilSpec.main71
                   UtilSpec.main70
                   UtilSpec.main62 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
d55983d47e28da92b778b552959b56d1
  main62 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Hspec.Expectations.shouldBe1
                   @ Util.Matrix
                   UtilSpec.main63
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   UtilSpec.$s$fShowArray
                   Util.$fAEqArray_$s$fEqArray
                   Util.m
                   Util.m) -}
7000e2fc77e9fececb9d4e2471cb9b68
  main63 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack UtilSpec.main64) -}
04576ed195988b8a079dc72f7b8cc6dc
  main64 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   UtilSpec.main65
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
caa0c5c768b34028197e8ade0aea3670
  main65 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((UtilSpec.main18, UtilSpec.main66)) -}
38f6cd04223e7108c706675ef8cb628e
  main66 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   UtilSpec.main17
                   UtilSpec.main16
                   UtilSpec.main15
                   UtilSpec.main69
                   UtilSpec.main68
                   UtilSpec.main69
                   UtilSpec.main67) -}
a062492aeaa0d5a2d650ab9ad5575219
  main67 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 19) -}
e6e46bf0895d1114e2e14af5ef1a3bcb
  main68 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 9) -}
f0de51b437aa10b64098533b5c2ed40a
  main69 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 21) -}
86d9be422879eae6a75f2dec1d96ff40
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Hspec.Expectations.shouldBe1
                   @ Util.Matrix
                   UtilSpec.main9
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   UtilSpec.$s$fShowArray
                   Util.$fAEqArray_$s$fEqArray
                   UtilSpec.main8
                   Util.sAddOnes) -}
817cd7491af0bccfb72e84c030598e4b
  main70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "implements equality"#) -}
fcb863dbb6de3c88d3ed6327c85320f8
  main71 ::
    GHC.Base.String
    -> Test.Hspec.Expectations.Expectation
    -> Test.Hspec.Core.Tree.SpecTree
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.specItem
                   @ Test.Hspec.Expectations.Expectation
                   UtilSpec.main72
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Sub (Test.Hspec.Core.Example.TFCo:R:Arg(->)0[0]
                                         (Sym (Test.Hspec.Core.Example.TFCo:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.NTCo:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))) -}
ae0358bd0f76ce436a1c31c662c164d5
  main72 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack UtilSpec.main73) -}
43e089e74dfd536c9c128e96c3f10598
  main73 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.Hspec.Core.Spec.it2
                   UtilSpec.main74) -}
7b808bbea70465a20afc0f269f84000d
  main74 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   UtilSpec.main75
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
903d928f49670090e9ab6fc4dbf9a661
  main75 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((UtilSpec.main29, UtilSpec.main76)) -}
fd89ec16dbc3833c9c0d9ddce8414a74
  main76 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   UtilSpec.main17
                   UtilSpec.main16
                   UtilSpec.main15
                   UtilSpec.main77
                   UtilSpec.main27
                   UtilSpec.main77
                   UtilSpec.main26) -}
38977ef23543eb7d4c322cfef9d2534c
  main77 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 20) -}
72d81d1f3f7d9515a25edc2f9f60547b
  main78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   UtilSpec.main80
                   UtilSpec.main79) -}
86a74ef0ae23fd94ee220e25ff59643d
  main79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "atrix"#) -}
d64048d11674b68be0d9b97a9494dece
  main8 :: Util.Matrix
  {- Unfolding: (case Util.s
                        `cast`
                      (Sub (Data.Array.Repa.Repr.Unboxed.TFCo:R:ArrayUsha[0]
                                <GHC.Types.Double>_N
                                <Data.Array.Repa.Index.DIM1
                                 Data.Array.Repa.Index.:. GHC.Types.Int>_N)) of ww { Data.Array.Repa.Repr.Unboxed.AUnboxed ww1 ww2 ->
                 case ww1 of ww3 { Data.Array.Repa.Index.:. ww4 ww5 ->
                 case ww4 of ww6 { Data.Array.Repa.Index.:. ww7 ww8 ->
                 case ww8 of ww9 { GHC.Types.I# ww10 ->
                 case ww5 of ww11 { GHC.Types.I# ww12 ->
                 case ww2
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.TFCo:R:VectorDouble[0]))
                           (Data.Vector.Unboxed.Base.NTCo:R:VectorDouble[0])) of ww13 { Data.Vector.Primitive.Vector ww14 ww15 ww16 ->
                 Util.$waddOnes ww7 ww10 ww12 ww14 ww16 } } } } } }) -}
0ffab7e26e7680f95ac1d3c8f3896194
  main80 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'M') -}
468d7b5c60c30eec9f9ec6d83b99f3fd
  main9 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack UtilSpec.main10) -}
21029b6efad78c768b73a4483b761db3
  spec :: Test.Hspec.Core.Spec.Monad.Spec
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                UtilSpec.main2
                  `cast`
                (Trans
                     (Sym (GHC.Types.NTCo:IO[0]
                               <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                    <[Test.Hspec.Core.Tree.SpecTree ()]>_N <GHC.Types.IO>_R <()>_N))
                          (Sym (Test.Hspec.Core.Spec.Monad.NTCo:SpecM[0] <()>_N) <()>_N))) -}
"SPEC/UtilSpec $fShow:. @ (DIM0 :. Int) @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                           (Data.Array.Repa.Index.DIM0
                                                                            Data.Array.Repa.Index.:. GHC.Types.Int)
                                                               $dShow1 :: GHC.Show.Show
                                                                            GHC.Types.Int
  Data.Array.Repa.Index.$fShow:. @ (Data.Array.Repa.Index.DIM0
                                    Data.Array.Repa.Index.:. GHC.Types.Int)
                                 @ GHC.Types.Int
                                 $dShow
                                 $dShow1
  = UtilSpec.$s$fShow:.3
"SPEC/UtilSpec $fShow:. @ Z @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               Data.Array.Repa.Index.Z
                                                   $dShow1 :: GHC.Show.Show GHC.Types.Int
  Data.Array.Repa.Index.$fShow:. @ Data.Array.Repa.Index.Z
                                 @ GHC.Types.Int
                                 $dShow
                                 $dShow1
  = UtilSpec.$s$fShow:.
"SPEC/UtilSpec $fShow:._$cshowList @ (DIM0 :. Int) @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                      (Data.Array.Repa.Index.DIM0
                                                                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                                                          $dShow1 :: GHC.Show.Show
                                                                                       GHC.Types.Int
  Data.Array.Repa.Index.$fShow:._$cshowList @ (Data.Array.Repa.Index.DIM0
                                               Data.Array.Repa.Index.:. GHC.Types.Int)
                                            @ GHC.Types.Int
                                            $dShow
                                            $dShow1
  = UtilSpec.$s$fShow:._$s$fShow:._$cshowList
"SPEC/UtilSpec $fShowArray @ (DIM1 :. Int) @ Double" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                 (Data.Array.Repa.Index.DIM1
                                                                                  Data.Array.Repa.Index.:. GHC.Types.Int)
                                                                     $dShow1 :: GHC.Show.Show
                                                                                  GHC.Types.Double
                                                                     $dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                  GHC.Types.Double
  Data.Array.Repa.Repr.Unboxed.$fShowArray @ (Data.Array.Repa.Index.DIM1
                                              Data.Array.Repa.Index.:. GHC.Types.Int)
                                           @ GHC.Types.Double
                                           $dShow
                                           $dShow1
                                           $dUnbox
  = UtilSpec.$s$fShowArray
"SPEC/UtilSpec $fShowArray_$cshow @ (DIM1 :. Int) @ Double" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                        (Data.Array.Repa.Index.DIM1
                                                                                         Data.Array.Repa.Index.:. GHC.Types.Int)
                                                                            $dShow1 :: GHC.Show.Show
                                                                                         GHC.Types.Double
                                                                            $dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                         GHC.Types.Double
  Data.Array.Repa.Repr.Unboxed.$fShowArray_$cshow @ (Data.Array.Repa.Index.DIM1
                                                     Data.Array.Repa.Index.:. GHC.Types.Int)
                                                  @ GHC.Types.Double
                                                  $dShow
                                                  $dShow1
                                                  $dUnbox
  = UtilSpec.$s$fShowArray_$s$fShowArray_$cshow
"SPEC/UtilSpec $fShowArray_$cshowList @ (DIM1 :. Int) @ Double" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                            (Data.Array.Repa.Index.DIM1
                                                                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                                                                $dShow1 :: GHC.Show.Show
                                                                                             GHC.Types.Double
                                                                                $dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                             GHC.Types.Double
  Data.Array.Repa.Repr.Unboxed.$fShowArray_$cshowList @ (Data.Array.Repa.Index.DIM1
                                                         Data.Array.Repa.Index.:. GHC.Types.Int)
                                                      @ GHC.Types.Double
                                                      $dShow
                                                      $dShow1
                                                      $dUnbox
  = UtilSpec.$s$fShowArray_$s$fShowArray_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

